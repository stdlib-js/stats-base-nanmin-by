{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/accessors.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isNegativeZero from '@stdlib/math-base-assert-is-negative-zero';\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Computes the minimum value of a strided array via a callback function, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Collection} x - input array/collection\n* @param {integer} strideX - index increment\n* @param {NonNegativeInteger} offsetX - starting index\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - execution context\n* @returns {number} minimum value\n*\n* @example\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, NaN, 0.0, -1.0, -3.0 ];\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* var v = nanminBy( x.length, x, 1, 0, accessor );\n* // returns -10.0\n*/\nfunction nanminBy( N, x, strideX, offsetX, clbk, thisArg ) {\n\tvar min;\n\tvar ix;\n\tvar o;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, o, strideX, offsetX, clbk, thisArg );\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\tv = clbk.call( thisArg, x[ offsetX ], 0, offsetX, x );\n\t\tif ( v === void 0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn v;\n\t}\n\tix = offsetX;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tmin = clbk.call( thisArg, x[ ix ], i, ix, x );\n\t\tif ( min === min && min !== void 0 ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += strideX;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\ti += 1;\n\tfor ( i; i < N; i++ ) {\n\t\tix += strideX;\n\t\tv = clbk.call( thisArg, x[ ix ], i, ix, x );\n\t\tif ( v === void 0 || isnan( v ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ( v < min || ( v === min && isNegativeZero( v ) ) ) {\n\t\t\tmin = v;\n\t\t}\n\t}\n\treturn min;\n}\n\n\n// EXPORTS //\n\nexport default nanminBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isNegativeZero from '@stdlib/math-base-assert-is-negative-zero';\n\n\n// MAIN //\n\n/**\n* Computes the minimum value of a strided array via a callback function, ignoring `NaN` values.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - execution context\n* @returns {number} minimum value\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n*\n* var x = toAccessorArray( [ -2.0, 1.0, 3.0, -5.0, 4.0, NaN, 0.0, -1.0, -3.0 ] );\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* var v = nanminBy( x.length, arraylike2object( x ), 1, 0, accessor );\n* // returns -10.0\n*/\nfunction nanminBy( N, x, strideX, offsetX, clbk, thisArg ) {\n\tvar xbuf;\n\tvar get;\n\tvar min;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessor:\n\tget = x.accessors[0];\n\n\tif ( N === 1 || strideX === 0 ) {\n\t\tv = clbk.call( thisArg, get( xbuf, offsetX ), 0, offsetX, x );\n\t\tif ( v === void 0 || isnan( v ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn v;\n\t}\n\tix = offsetX;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tmin = clbk.call( thisArg, get( xbuf, ix ), i, ix, xbuf );\n\t\tif ( min === min && min !== void 0 ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += strideX;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\ti += 1;\n\tfor ( i; i < N; i++ ) {\n\t\tix += strideX;\n\t\tv = clbk.call( thisArg, get( xbuf, ix ), i, ix, xbuf );\n\t\tif ( v === void 0 || isnan( v ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ( v < min || ( v === min && isNegativeZero( v ) ) ) {\n\t\t\tmin = v;\n\t\t}\n\t}\n\treturn min;\n}\n\n\n// EXPORTS //\n\nexport default nanminBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the minimum value of a strided array via a callback function, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Collection} x - input array/collection\n* @param {integer} strideX - index increment\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - execution context\n* @returns {number} minimum value\n*\n* @example\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* var v = nanminBy( x.length, x, 1, accessor );\n* // returns -10.0\n*/\nfunction nanminBy( N, x, strideX, clbk, thisArg ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ), clbk, thisArg );\n}\n\n\n// EXPORTS //\n\nexport default nanminBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the minimum value of a strided array via a callback function and ignoring `NaN` values.\n*\n* @module @stdlib/stats-base-nanmin-by\n*\n* @example\n* import nanminBy from '@stdlib/stats-base-nanmin-by';\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, NaN, 0.0, -1.0, -3.0 ];\n*\n* var v = nanminBy( x.length, x, 1, accessor );\n* // returns -10.0\n*\n* @example\n* import nanminBy from '@stdlib/stats-base-nanmin-by';\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, NaN, 0.0, -1.0, -3.0 ];\n*\n* var v = nanminBy.ndarray( x.length, x, 1, 0, accessor );\n* // returns -10.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"ndarray\": \"main.ndarray\" }\n"],"names":["nanminBy","N","x","strideX","offsetX","clbk","thisArg","min","ix","o","v","i","NaN","arraylike2object","accessorProtocol","xbuf","get","data","accessors","call","isnan","isNegativeZero","ndarray","stride2offset","setReadOnly","main"],"mappings":";;ihBAmDA,SAASA,EAAUC,EAAGC,EAAGC,EAASC,EAASC,EAAMC,GAChD,IAAIC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKV,GAAK,EACT,OAAOW,IAGR,IADAH,EAAII,EAAkBX,IACfY,iBACN,OCRF,SAAmBb,EAAGC,EAAGC,EAASC,EAASC,EAAMC,GAChD,IAAIS,EACAC,EACAT,EACAC,EACAE,EACAC,EAQJ,GALAI,EAAOb,EAAEe,KAGTD,EAAMd,EAAEgB,UAAU,GAEP,IAANjB,GAAuB,IAAZE,EAEf,YAAW,KADXO,EAAIL,EAAKc,KAAMb,EAASU,EAAKD,EAAMX,GAAW,EAAGA,EAASF,KACrCkB,EAAOV,GACpBE,IAEDF,EAGR,IADAF,EAAKJ,EACCO,EAAI,EAAGA,EAAIV,KAChBM,EAAMF,EAAKc,KAAMb,EAASU,EAAKD,EAAMP,GAAMG,EAAGH,EAAIO,KACrCR,QAAe,IAARA,GAFDI,IAKnBH,GAAML,EAEP,GAAKQ,IAAMV,EACV,OAAOW,IAGR,IADAD,GAAK,EACIA,EAAIV,EAAGU,IACfH,GAAML,OAEK,KADXO,EAAIL,EAAKc,KAAMb,EAASU,EAAKD,EAAMP,GAAMG,EAAGH,EAAIO,KAC3BK,EAAOV,KAGvBA,EAAIH,GAASG,IAAMH,GAAOc,EAAgBX,MAC9CH,EAAMG,GAGR,OAAOH,CACR,CDpCSW,CAAWjB,EAAGQ,EAAGN,EAASC,EAASC,EAAMC,GAEjD,GAAW,IAANL,GAAuB,IAAZE,EAEf,YAAW,KADXO,EAAIL,EAAKc,KAAMb,EAASJ,EAAGE,GAAW,EAAGA,EAASF,IAE1CU,IAEDF,EAGR,IADAF,EAAKJ,EACCO,EAAI,EAAGA,EAAIV,KAChBM,EAAMF,EAAKc,KAAMb,EAASJ,EAAGM,GAAMG,EAAGH,EAAIN,KAC7BK,QAAe,IAARA,GAFDI,IAKnBH,GAAML,EAEP,GAAKQ,IAAMV,EACV,OAAOW,IAGR,IADAD,GAAK,EACIA,EAAIV,EAAGU,IACfH,GAAML,OAEK,KADXO,EAAIL,EAAKc,KAAMb,EAASJ,EAAGM,GAAMG,EAAGH,EAAIN,KACnBkB,EAAOV,KAGvBA,EAAIH,GAASG,IAAMH,GAAOc,EAAgBX,MAC9CH,EAAMG,GAGR,OAAOH,CACR,CE/CA,SAASP,EAAUC,EAAGC,EAAGC,EAASE,EAAMC,GACvC,OAAOgB,EAASrB,EAAGC,EAAGC,EAASoB,EAAetB,EAAGE,GAAWE,EAAMC,EACnE,CCSAkB,EAAAC,EAAA,UAAAH"}